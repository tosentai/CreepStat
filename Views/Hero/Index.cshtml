@using Newtonsoft.Json
@model List<Hero>

@{
    ViewData["Title"] = "Dota 2 Heroes";
    var groupedHeroes = ViewData["GroupedHeroes"] as Dictionary<string, List<Hero>>;
}

<div class="bg-cover bg-center custom-bg-heroes">
    <div class="max-w-5xl mx-auto mt-0 p-5 shadow-lg rounded-lg">
        <h2 class="text-3xl font-bold text-center text-white mb-6 text-shadow-outline">Dota 2 Heroes</h2>

        @if (groupedHeroes != null && groupedHeroes.Any())
        {
            @foreach (var group in groupedHeroes)
            {
                <div class="mb-8">
                    <div class="flex items-center mb-4">
                        @{
                            var attributeImage = "";
                            var attributeName = "";
                            switch (group.Key.ToLower())
                            {
                                case "agi":
                                    attributeImage = "images/agi.webp";
                                    attributeName = "Agility";
                                    break;
                                case "str":
                                    attributeImage = "images/str.webp";
                                    attributeName = "Strength";
                                    break;
                                case "int":
                                    attributeImage = "images/int.webp";
                                    attributeName = "Intelligence";
                                    break;
                                case "all":
                                    attributeImage = "images/all.webp";
                                    attributeName = "Universal";
                                    break;
                            }
                        }
                        <img src="@attributeImage" alt="@attributeName" class="w-8 h-8 mr-2" />
                        <h3 class="text-2xl font-bold text-white text-shadow-outline">@attributeName</h3>
                    </div>

                    <div class="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-4">
                        @foreach (var hero in group.Value)
                        {
                            <div class="hero-container">
                                <button class="hero-button bg-[#2C2C2C] text-white p-2 rounded-lg shadow-md hover:bg-[#1E1E1E] transition duration-300 w-full text-sm"
                                        data-id="@hero.Id">
                                    <div class="font-medium">@hero.LocalizedName</div>
                                </button>
                            </div>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <p class="text-white text-center">No heroes found.</p>
        }

        <div id="matchup-container" class="hidden mt-6">
            <h3 class="text-xl font-bold text-white mb-2">Matchups for <span id="hero-name"></span></h3>
            <table class="bg-[#2C2C2C] border border-[#333333] rounded-lg shadow-md w-full">
                <thead>
                    <tr class="bg-[#1E1E1E] text-white">
                        <th class="px-6 py-2 text-sm font-semibold cursor-pointer" data-sort="heroName">Hero Name</th>
                        <th class="px-6 py-2 text-sm font-semibold cursor-pointer" data-sort="games_played">Games Played</th>
                        <th class="px-6 py-2 text-sm font-semibold cursor-pointer" data-sort="wins">Wins</th>
                        <th class="px-6 py-2 text-sm font-semibold cursor-pointer" data-sort="winRate">Win Rate</th>
                    </tr>
                </thead>
                <tbody id="matchup-table" class="divide-y divide-[#333333] text-white"></tbody>
            </table>
        </div>
    </div>
</div>

<script>
    document.querySelectorAll(".hero-button").forEach(button => {
        button.addEventListener("click", function () {
            let heroId = this.getAttribute("data-id");
            let heroName = this.querySelector(".font-medium").textContent;

            document.getElementById("hero-name").textContent = heroName;

            fetch(`/Hero/GetMatchups?heroId=${heroId}`)
                .then(response => response.json())
                .then(data => {
                    let tableBody = document.getElementById("matchup-table");
                    let sortOrder = {};

                    const sortTable = (sortKey, isAscending) => {
                        data.sort((a, b) => {
                            let valueA = sortKey === 'winRate' ? a.wins / a.games_played : a[sortKey];
                            let valueB = sortKey === 'winRate' ? b.wins / b.games_played : b[sortKey];

                            if (valueA < valueB) return isAscending ? -1 : 1;
                            if (valueA > valueB) return isAscending ? 1 : -1;
                            return 0;
                        });

                        renderTable(data);
                        sortOrder[sortKey] = isAscending;
                    };

                    const renderTable = (data) => {
                        tableBody.innerHTML = "";
                        data.forEach(matchup => {
                            let winRate = matchup.games_played > 0 ? (matchup.wins / matchup.games_played * 100).toFixed(2) : 0;
                            let row = `
                                    <tr>
                                        <td class="px-6 py-2">${matchup.heroName}</td>
                                        <td class="px-6 py-2">${matchup.games_played}</td>
                                        <td class="px-6 py-2 text-[#4CAF50] font-semibold">${matchup.wins}</td>
                                        <td class="px-6 py-2">${winRate}%</td>
                                    </tr>
                                `;
                            tableBody.innerHTML += row;
                        });
                    };

                    document.querySelectorAll('th[data-sort]').forEach(header => {
                        header.addEventListener('click', () => {
                            let sortKey = header.getAttribute('data-sort');
                            let isAscending = sortOrder[sortKey] !== undefined ? !sortOrder[sortKey] : true;
                            sortTable(sortKey, isAscending);
                        });
                    });

                    renderTable(data);

                    document.getElementById("matchup-container").classList.remove("hidden");
                })
                .catch(error => {
                    console.error("Error fetching matchups:", error);
                });
        });
    });
</script>

<style>
    .custom-bg-heroes {
        background-image: url('/images/b6.jpg');
        background-size: cover;
        background-position: center; 
        background-attachment: fixed; 
        background-repeat: no-repeat;
    }

    #matchup-container table {
        background-color: rgba(44, 44, 44, 0.8); 
        border-radius: 8px; 
        overflow: hidden;
    }

    #matchup-container th,
    #matchup-container td {
        background-color: transparent;
    }
</style>
