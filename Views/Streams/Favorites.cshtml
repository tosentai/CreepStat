@model List<FavoriteStreamer>

<div class="container mx-auto p-6 text-white">
    <div class="flex justify-between items-center mb-6">
        <h2 class="text-3xl font-bold">⭐ My Favorite Streamers</h2>
        <a href="/Streams" class="px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg font-medium transition flex items-center gap-2">
            <span>←</span>
            <span>Back to Streams</span>
        </a>
    </div>

    @if (Model.Any())
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @foreach (var favorite in Model)
            {
                <div class="bg-gray-800 rounded-xl p-6 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
                    <div class="flex items-center space-x-4 mb-4">
                        <img src="@favorite.ProfileImageUrl" alt="@favorite.StreamerDisplayName"
                             class="w-16 h-16 rounded-full object-cover border-2 border-purple-500">
                        <div>
                            <h3 class="text-xl font-bold">@favorite.StreamerDisplayName</h3>
                            <p class="text-gray-400">@@@favorite.StreamerName</p>
                            <p class="text-sm text-gray-500">Added @favorite.AddedAt.ToString("MMM dd, yyyy")</p>
                        </div>
                    </div>

                    <div class="flex space-x-2">
                        <a href="/Streams/Streamer/@favorite.StreamerId"
                           class="flex-1 text-center px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg font-medium transition flex items-center justify-center gap-2">
                            <span>▶️</span>
                            <span>Watch Stream</span>
                        </a>
                        <button onclick="removeFavorite('@favorite.StreamerId', this)"
                                class="px-4 py-2 bg-red-700 hover:bg-red-600 rounded-lg font-medium transition flex items-center gap-2">
                            <span>❌</span>
                            <span>Remove</span>
                        </button>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-12">
            <div class="text-6xl mb-4">😢</div>
            <h3 class="text-2xl font-bold mb-2">No favorite streamers yet</h3>
            <p class="text-gray-400 mb-6">Start adding your favorite Dota 2 streamers to see them here!</p>
            <a href="/Streams" class="px-6 py-3 bg-gray-700 hover:bg-gray-600 rounded-lg font-medium transition inline-flex items-center gap-2">
                <span>🔍</span>
                <span>Browse Streams</span>
            </a>
        </div>
    }
</div>

<style>
    .notification {
        animation: fadeInOut 3s ease-in-out forwards;
    }

    @@keyframes fadeInOut {
        0% {
            opacity: 0;
            transform: translateY(-20px);
        }

        10% {
            opacity: 1;
            transform: translateY(0);
        }

        90% {
            opacity: 1;
            transform: translateY(0);
        }

        100% {
            opacity: 0;
            transform: translateY(-20px);
        }
    }
</style>

<script>
    async function removeFavorite(streamerId, button) {
        if (!confirm('Are you sure you want to remove this streamer from favorites?')) {
            return;
        }

        try {
            button.disabled = true;
            button.innerHTML = '<span class="animate-spin">⏳</span> Removing...';

            const response = await fetch('/Streams/ToggleFavorite', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: `streamerId=${encodeURIComponent(streamerId)}`
            });

            const result = await response.json();

            if (result.success) {
                const card = button.closest('.bg-gray-800');
                card.style.opacity = '0';
                card.style.transform = 'scale(0.9)';
                setTimeout(() => card.remove(), 300);

                showNotification('Streamer removed from favorites', 'success');

                if (document.querySelectorAll('.bg-gray-800').length === 0) {
                    setTimeout(() => location.reload(), 1000);
                }
            }
        } catch (error) {
            console.error('Error removing favorite:', error);
            showNotification('Error removing favorite', 'error');
            button.disabled = false;
            button.innerHTML = '<span>❌</span> <span>Remove</span>';
        }
    }

    function showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.className = `fixed bottom-4 right-4 px-6 py-3 rounded-xl z-50 flex items-center gap-3 ${type === 'success' ? 'bg-gray-700' : 'bg-red-700'
            } notification`;

        const icon = document.createElement('span');
        icon.className = 'text-xl';
        icon.textContent = type === 'success' ? '✅' : '⚠️';

        const text = document.createElement('span');
        text.className = 'text-white font-medium';
        text.textContent = message;

        notification.appendChild(icon);
        notification.appendChild(text);
        document.body.appendChild(notification);

        setTimeout(() => {
            notification.remove();
        }, 3000);
    }
</script>